// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPayload user payload
// swagger:model UserPayload
type UserPayload struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// user name
	// Required: true
	UserName *string `json:"user_name"`

	// Only 3 values accepted (admin,collegues,cook)
	// Required: true
	// Pattern: admin|cook|collegues
	UserType *string `json:"user_type"`
}

// Validate validates this user payload
func (m *UserPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPayload) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *UserPayload) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("user_name", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

func (m *UserPayload) validateUserType(formats strfmt.Registry) error {

	if err := validate.Required("user_type", "body", m.UserType); err != nil {
		return err
	}

	if err := validate.Pattern("user_type", "body", string(*m.UserType), `admin|cook|collegues`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPayload) UnmarshalBinary(b []byte) error {
	var res UserPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
